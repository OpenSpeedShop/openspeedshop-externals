--- libunwind-20160112/src/ppc/Gis_signal_frame.c	2016-01-12 12:43:17.000000000 -0800
+++ libunwind-20160112-fixes/src/ppc/Gis_signal_frame.c	2016-11-02 09:03:27.078240520 -0700
@@ -27,6 +27,13 @@
 
 #include <libunwind_i.h>
 
+#if defined(BGQ)
+#define W0_VAL 0x38210098380000ac
+#else
+#define W0_VAL 0x38210080380000ac
+#endif
+#define W1_VAL 0x44000002
+
 PROTECTED int
 unw_is_signal_frame (unw_cursor_t * cursor)
 {
@@ -37,6 +44,12 @@
   void *arg;
   int ret;
 
+  /* disable signal checking because of aborts when trying to determine if we are in a signal context */
+  /* This disables the signal handler detector that was causing the segfaults.  The way O|SS starts its */
+  /* stack walk by using the context passed to the signal handler means that it never actually sees a */
+  /* signal frame on ppc, so that code wasn't actually needed.  */
+  return 0;
+
   as = c->dwarf.as;
   as->validate = 1;             /* Don't trust the ip */
   arg = c->dwarf.as_arg;
--- libunwind-20160112/src/ppc64/Gstep.c	2016-01-12 12:43:17.000000000 -0800
+++ libunwind-20160112-fixes/src/ppc64/Gstep.c	2016-11-02 09:03:27.079240520 -0700
@@ -36,7 +36,12 @@
    appears to be at this offset relative to the stack pointer when in the
    context of the signal handler return trampoline code -
    __kernel_sigtramp_rt64.  */
+
+#if defined(BGQ)
+#define __SIGNAL_FRAMESIZE 152
+#else
 #define __SIGNAL_FRAMESIZE 128
+#endif
 
 /* This definition comes from the document "64-bit PowerPC ELF Application
    Binary Interface Supplement 1.9", section 3.2.2.
