################################################################################
# Copyright (c) 2008-2016 Krell Institute  All Rights Reserved.
#
# This library is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2.1 of the License, or (at your option)
# any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
################################################################################

import types
import code
import os
import os.path
import re
import string
import sys
import subprocess
import PY_Input

offlinepy_debug = 0

if 'OPENSS_DEBUG_STARTUP' in os.environ:
    offlinepy_debug = os.environ["OPENSS_DEBUG_STARTUP"]

def system_call(command):
    p = subprocess.Popen([command], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
    return p.stdout.read()

def RunCBTFOfflineExp(program="*", collector="*", installed="/usr"):
    oss_db_dir = os.getcwd()
    if os.environ.has_key("OPENSS_DB_DIR"):
        oss_db_dir = os.environ['OPENSS_DB_DIR']

    if os.environ.has_key("OPENSS_DEBUG_CLI_PYTHON_GC"):
        gc.set_debug(gc.DEBUG_LEAK)
        gc.get_objects()
    gc.disable()

    oss_installation_dir = "@oss_installation_dir@"
    ossdrivertouse = oss_installation_dir + "/bin/oss" + collector

    # HANDLE CBTF way of running collectors.
    # Run the program using the oss convinience scripts.
    # This is done using the system_call function above that allows
    # us to capture the output and process it for the database name
    # it creates.
    # Command needs to be constructed as needed from passed args.
    # TODO: How to allow running with --offline?  Use an env var
    # since we can not easily pass options with expGo which is the
    # cli command that calls this python code. We could reuse the
    # now inused installed argument to pass an option for --offline.
    command = ossdrivertouse + " " + "\"" + program + "\""
    print "[openss cbtf] running experiment as: " + command
    print "[openss cbtf] waiting for experiment output..."

    # now run the experiment and capture it output. and print it.
    # FIXME: Is there a tee command to display AND capture output?
    exp_out = system_call(command) 
    print exp_out

    search_header = "-" + collector + "-"
    search_ender = ".openss"

    # output from system_call contains a string like:
    # "default view for /some_path/someprog-pcsamp-28.openss"
    # we need to restore that into openss so it is active.
    # this finds the database including the full directory,
    # this depends on osscollect ALWAYS outputing the database
    # name including the full path to the database name.
    m = re.search(oss_db_dir + '/(.+?)' + search_header + '(.+?)' + search_ender, exp_out)
    if m:
        the_database = m.group(0)
    else:
	print "[openss cbtf] Did not find the expected database in " + oss_db_dir

    # close out the initial experiment holder created by instrumentor
    sv_line = myparse.process("expclose -x1")
    myparse.runsource(sv_line, "stderr")

    # The current cbtf instrumentor creates a default but ever increasing
    # database X1.0.openss where the interior digit is incremented.
    # there for we should remove any existing X1.0.openss.
    clean_command = "/bin/rm -f " + oss_db_dir + "/X1.0.openss"
    os.system(clean_command)

    # restore the newly created database into openss for further use.
    # the only caveat is the initial expID was 1 and the restored is 2.
    # We could prevent expcreate and or attach from ever creating a db
    # and there for an expID.  The issue with that is if someone issues
    # and expstatus or such after the expcreate, then nothing will show.
    restore_command = myparse.process("exprestore -f " + the_database)
    myparse.runsource(restore_command, "stderr")
