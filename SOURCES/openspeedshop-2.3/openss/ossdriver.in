#!/bin/bash

################################################################################
# die gracefully...
################################################################################
die()
{
    echo "$0: error: $*" 1>&2
    exit 1
}

################################################################################
# Display Usage When Necessary. Not implemented in this script.
################################################################################
usage() {
    cat << EOF
EOF
}

# topology file support for oss with cbtf
topology_opt=""
# fileio option for cbtf.  used to run collectors in old offline mode.
cbtf_offline_opt=""
# default to using cbtf for all experiments. By default we will use --offline
# for pcsamp,hwcsamp, and usertime due to signal handler safety issues with
# ltwt mrnet sends.  We can override this using --cbtf which should force
# cbtf usage for those experiments.
force_cbtf_flag=false

################################################################################
# Setup thee offline directories
################################################################################
setup_offline()
{
	    # According to OSS documentation the published method to set and alternative
	    # location for rawdata files (eg. for lustre) is via OPENSS_RAWDATA_DIR.
	    # Therefore we honor that naming convention and convert as needed to
	    # CBTF_RAWDATA_DIR for the internal implementation used in cbtf-krell code.
	    #
	    # NOTE: Always place rawdata files into a subdirectory named offline-cbtf
	    # in case user choses a common location like current working directory,
	    # home directory, or such.
	    #
	    if [ "x${OPENSS_RAWDATA_DIR}" == "x" ] ; then
		test -d "/tmp/${USER}/offline-cbtf" || mkdir -p "/tmp/${USER}/offline-cbtf"
		export OPENSS_RAWDATA_DIR="/tmp/${USER}/offline-cbtf"
	    else
		test -d ${OPENSS_RAWDATA_DIR}/offline-cbtf || mkdir -p ${OPENSS_RAWDATA_DIR}/offline-cbtf
		export OPENSS_RAWDATA_DIR=${OPENSS_RAWDATA_DIR}/offline-cbtf
	    fi

	    # For safety we cd to the raw directory and only remove the sub-directories
	    # each collector creates for the rawddata files.
	    # For the cbtf-krell offline collectors, we likely do no need the extra level
	    # of one directory per process/thread since we write only one file now with
	    # the naming convention: exe_name-pid-posix_tid.openss-data
	    #
	    pushd ${OPENSS_RAWDATA_DIR}
	    rm -rf ./cbtf-rawdata*
	    popd

	    # The cbtf-krell collectors internally use the CBTF_RAWDATA_DIR environment
	    # variable. So we set that here.
	    export CBTF_RAWDATA_DIR=${OPENSS_RAWDATA_DIR}
}

# Setup the OpenSpeedShop instrumentor variable (cbtf or offline)
instrumentor=@oss_instrumentor@
targetos=@oss_targetos@

# debug flag... set in options loop via -d....
debug_flag=0

# Initialize flags to indicate which rate or threshold parameter was seen
# If this is set we will up the sampling rate or threshold depending on
# the experiment.
high_flag=false
low_flag=false
use_default_flag=false

# Initialize to indicate no "input argument rate value" parameter was seen
# If this is set we will use the "input argument rate value" parameter
# instead of the experiment default value.
rate_threshold_value=0

# Initialize to indicate no "input argument event value" parameter was seen
# If this is set we will use the "input argument event value" parameter
# instead of the experiment default event value.
input_argument_event_or_trace_list_value=0
string_value=""

#
# DEFAULT VALUES:
# MUST MATCH THE DEFAULTS DEFINED BY THE SOURCE in:
# OpenSpeedShop/plugins/collectors/<experiment_type> runtime code.
#
# IMPORTANT NOTE: all cbtf collectors use environment variables which
# are prefixed with CBTF_ rather than OPENSS_.  So for this script
# to work with cbtf, the user must use the OPENSS_ names and the
# driver script will export for cbtf instrumentor the CBTF_ names.
#
# Preferably for both offline and cbtf instrumentors, we should only
# export these environment variable IFF there is a change from the
# collector defaults.  This is difficult for hwc threshold.
#
# Corresponds to OPENSS_PCSAMP_RATE or CBTF_PCSAMP_RATE
pcsamp_default_rate=100

# Corresponds to OPENSS_USERTIME_RATE or CBTF_USERTIME_RATE
usertime_default_rate=35

#
# NOTE:  It is highly unlikely if at all possible to match the
# defaults for hwc thresholds.  In fact, the collector runtimes that
# use a threshold compute using papi internal structures that have
# filled in a mhz values for the cpu at the time of execution.
# Further more, that threshold value is only sufficient for the
# simple TOT_CYC counter.  Many counters may never ever hot that threshold.
# TODO: We may need to tune these defaults at build time by querying
# some system param similar to the internal method used at runtime.
# Until then we will use these defaults for threshold experiments.
#
# Corresponds to OPENSS_HWC_THRESHOLD or CBTF_HWC_THRESHOLD
# Corresponds to OPENSS_HWCTIME_THRESHOLD or CBTF_HWCTIME_THRESHOLD
hwc_default_threshold=100000000
hwctime_default_threshold=100000000

# Corresponds to OPENSS_HWC_EVENT or CBTF_HWC_EVENT
# Corresponds to OPENSS_HWCTIME_EVENT or CBTF_HWCTIME_EVENT
hwc_default_event="PAPI_TOT_CYC"
hwctime_default_event="PAPI_TOT_CYC"

# Corresponds to OPENSS_HWCSAMP_EVENTS or CBTF_HWCSAMP_EVENTS
hwcsamp_default_events="PAPI_TOT_CYC,PAPI_TOT_INS"
# Corresponds to OPENSS_HWCSAMP_RATE or CBTF_HWCSAMP_RATE
hwcsamp_default_rate=100

# Corresponds to OPENSS_MPI_TRACED or CBTF_MPI_TRACED
# NOTE: These defaults are not used in this script.
# They are only here for reference and may not reflect the
# actual defaults in the collectors themselves.


mpi_default_traceable_functions="MPI_Allgather,MPI_Allgatherv,MPI_Allreduce,MPI_Alltoall,MPI_Alltoallv,MPI_Barrier,MPI_Bcast,MPI_Bsend,MPI_Bsend_init,MPI_Cancel,MPI_Cart_create,MPI_Cart_sub,MPI_Comm_create,MPI_Comm_dup,MPI_Comm_free,MPI_Comm_split,MPI_File_close,MPI_File_delete,MPI_File_get_amode,MPI_File_get_group,MPI_File_get_info,MPI_File_get_position,MPI_File_get_position_shared,MPI_File_get_size,MPI_File_get_view,MPI_File_iread,MPI_File_iread_at,MPI_File_iread_shared,MPI_File_iwrite,MPI_File_iwrite_at,MPI_File_iwrite_shared,MPI_File_open,MPI_File_read,MPI_File_read_all,MPI_File_read_at,MPI_File_read_at_all,MPI_File_read_ordered,MPI_File_read_shared,MPI_File_seek,MPI_File_seek_shared,MPI_File_set_info,MPI_File_set_size,MPI_File_set_view,MPI_File_write,MPI_File_write_all,MPI_File_write_at,MPI_File_write_at_all,MPI_File_write_ordered,MPI_File_write_shared,MPI_Finalize,MPI_Gather,MPI_Gatherv,MPI_Get_count,MPI_Graph_create,MPI_Ibsend,MPI_Init,MPI_Intercomm_create,MPI_Intercomm_merge,MPI_Iprobe,MPI_Irecv,MPI_Irsend,MPI_Isend,MPI_Issend,MPI_Pack,MPI_Probe,MPI_Recv,MPI_Recv_init,MPI_Reduce,MPI_Reduce_scatter,MPI_Request_free,MPI_Rsend,MPI_Rsend_init,MPI_Scan,MPI_Scatter,MPI_Scatterv,MPI_Send,MPI_Sendrecv,MPI_Sendrecv_replace,MPI_Ssend,MPI_Ssend_init,MPI_Start,MPI_Startall,MPI_Test,MPI_Testall,MPI_Testany,MPI_Testsome,MPI_Unpack,MPI_Wait,MPI_Waitall,MPI_Waitany,MPI_Waitsome"

# These are predefined groupings of mpi calls. Safe to use here.
mpi_async_nonblocking_traceable_functions="MPI_Iallgather:MPI_Iallgatherv:MPI_Iallreduce:MPI_Ialltoall:\
MPI_Ialltoallv:MPI_Ialltoallw:MPI_Ibarrier:MPI_Ibcast:\
MPI_Iexscan:MPI_Igather:MPI_Igatherv:MPI_Ibsend:MPI_Improbe:\
MPI_Imrecv:MPI_Ineighbor_allgather:MPI_Ineighbor_allgatherv:\
MPI_Ineighbor_alltoall:MPI_Ineighbor_alltoallv:MPI_Ineighbor_alltoallw:\
MPI_Ireduce:MPI_Ireduce_scatter:MPI_Ireduce_scatter_block:\
MPI_Comm_idup:MPI_Iscan:MPI_Iscatter:MPI_Iscatterv";

mpi_asynchronous_p2p_traceable_functions="MPI_Cancel:MPI_Ibsend:MPI_Iprobe:MPI_Irecv:MPI_Irsend:\
MPI_Isend:MPI_Issend:MPI_Request_free:MPI_Test:MPI_Testall:\
MPI_Testany:MPI_Testsome:MPI_Wait:MPI_Waitall:MPI_Waitany:MPI_Waitsome"
mpi_collective_com_traceable_functions="MPI_Allgather:MPI_Allgatherv:MPI_Allreduce:MPI_Alltoall:\
MPI_Alltoallv:MPI_Barrier:MPI_Bcast:MPI_Gather:MPI_Gatherv:\
MPI_Reduce:MPI_Reduce_scatter:MPI_Scan:MPI_Scatter:MPI_Scatterv"

mpi_datatypes_traceable_functions="MPI_Pack:MPI_Unpack"
mpi_environment_traceable_functions="MPI_Finalize:MPI_Init"
mpi_file_io_traceable_functions="MPI_File_close:MPI_File_delete:MPI_File_get_amode:MPI_File_get_group:\
MPI_File_get_info:MPI_File_get_position:MPI_File_get_position_shared: \
MPI_File_get_size:MPI_File_get_view:MPI_File_iread:\
MPI_File_iread_at:MPI_File_iread_shared:MPI_File_iwrite:MPI_File_iwrite_at:\
MPI_File_iwrite_shared:MPI_File_open:MPI_File_read:MPI_File_read_all:\
MPI_File_read_at:MPI_File_read_at_all:MPI_File_read_ordered:MPI_File_read_shared:MPI_File_seek:\
MPI_File_seek_shared:MPI_File_set_info:MPI_File_set_size:MPI_File_set_view:\
MPI_File_write:MPI_File_write_all:MPI_File_write_at:MPI_File_write_at_all:\
MPI_File_write_ordered:MPI_File_write_shared"
mpi_graphs_contexts_comms_traceable_functions="MPI_Comm_create:MPI_Comm_dup:MPI_Comm_free:MPI_Comm_split:\
MPI_Intercomm_create:MPI_Intercomm_merge"
mpi_persistent_com_traceable_functions="MPI_Bsend_init:MPI_Recv_init:MPI_Rsend_init:MPI_Send_init:\
MPI_Ssend_init:MPI_Start:MPI_Startall"
mpi_process_topologies_traceable_functions="MPI_Cart_create:MPI_Cart_sub:MPI_Graph_create"
mpi_synchronous_p2p_traceable_functions="MPI_Bsend:MPI_Get_count:MPI_Probe:MPI_Recv:\
MPI_Rsend:MPI_Send:MPI_Sendrecv:MPI_Sendrecv_replace:MPI_Ssend"

# Corresponds to OPENSS_MPIT_TRACED or CBTF_MPI_TRACED
# NOTE: These defaults are not used in this script.
# They are only here for reference and may not reflect the
# actual defaults in the collectors themselves.
mpit_default_traceable_functions="MPI_Allgather,MPI_Allgatherv,MPI_Allreduce,MPI_Alltoall,MPI_Alltoallv,MPI_Barrier,MPI_Bcast,MPI_Bsend,MPI_Bsend_init,MPI_Cancel,MPI_Cart_create,MPI_Cart_sub,MPI_Comm_create,MPI_Comm_dup,MPI_Comm_free,MPI_Comm_split,MPI_Finalize,MPI_Gather,MPI_Gatherv,MPI_Get_count,MPI_Graph_create,MPI_Ibsend,MPI_Init,MPI_Intercomm_create,MPI_Intercomm_merge,MPI_Iprobe,MPI_Irecv,MPI_Irsend,MPI_Isend,MPI_Issend,MPI_Pack,MPI_Probe,MPI_Recv,MPI_Recv_init,MPI_Reduce,MPI_Reduce_scatter,MPI_Request_free,MPI_Rsend,MPI_Rsend_init,MPI_Scan,MPI_Scatter,MPI_Scatterv,MPI_Send,MPI_Sendrecv,MPI_Sendrecv_replace,MPI_Ssend,MPI_Ssend_init,MPI_Start,MPI_Startall,MPI_Test,MPI_Testall,MPI_Testany,MPI_Testsome,MPI_Unpack,MPI_Wait,MPI_Waitall,MPI_Waitany,MPI_Waitsome"

# Corresponds to OPENSS_MPIOTF_TRACED or CBTF_MPI_TRACED
# NOTE: These defaults are not used in this script.
# They are only here for reference and may not reflect the
# actual defaults in the collectors themselves.
mpiotf_default_traceable_functions="MPI_Allgather,MPI_Allgatherv,MPI_Allreduce,MPI_Alltoall, MPI_Alltoallv,MPI_Barrier,MPI_Bcast,MPI_Bsend,MPI_Bsend_init, MPI_Cancel,MPI_Cart_create,MPI_Cart_sub,MPI_Comm_create, MPI_Comm_dup,MPI_Comm_free,MPI_Comm_split,MPI_Finalize, MPI_Gather,MPI_Gatherv,MPI_Get_count,MPI_Graph_create, MPI_Ibsend,MPI_Init,MPI_Intercomm_create,MPI_Intercomm_merge, MPI_Iprobe,MPI_Irecv,MPI_Irsend,MPI_Isend,MPI_Issend, MPI_Pack,MPI_Probe,MPI_Recv,MPI_Recv_init,MPI_Reduce, MPI_Reduce_scatter,MPI_Request_free,MPI_Rsend,MPI_Rsend_init, MPI_Scan,MPI_Scatter,MPI_Scatterv,MPI_Send,MPI_Sendrecv, MPI_Sendrecv_replace,MPI_Ssend,MPI_Ssend_init,MPI_Start, MPI_Startall,MPI_Test,MPI_Testall,MPI_Testany,MPI_Testsome, MPI_Unpack,MPI_Wait,MPI_Waitall,MPI_Waitany,MPI_Waitsome"

# Corresponds to OPENSS_FPE_EVENT or CBTF_FPE_EVENT
fpe_default_events="inexact_result,division_by_zero,underflow,overflow,invalid_operation"

#
# END DEFAULT VALUES
#

while test "x$1" != x
do
    case "$1" in
       -h | --help)
	    show_help=1
            shift
            ;;
       -d | --debug)
            debug_flag=1
            shift
            ;;
      --topology)
            test "x$2" != x || die "missing argument: $*"
            topology_file=$2
            test -f "$topology_file" || die "unable to find: $topology_file"
	    topology_opt="--topology $topology_file"
            shift ; shift
            ;;
       --offline)
            cbtf_offline_opt="--offline"
	    force_cbtf_flag=false
	    setup_offline
            shift
            ;;
       --cbtf)
	    # --cbtf and --offline can not be used at same time.
	    # last one on command line will be used.
	    # at this time we are forcing --offline for pcsamp,hwcsamp, and
	    # usertime since the ltwt mrnet send is not safe in a sighandler.
            cbtf_offline_opt=""
	    force_cbtf_flag=true
            shift
            ;;
        -- )
            shift
            break
            ;;

        -* )
            die "unknown option: $1"
            ;;

        * )
            break
            ;;
    esac
done

if [ ! -z "$OPENSS_DEBUG_DRIVER" ] ; then
  debug_flag=1
fi

show_help=0

if [ $debug_flag == 1 ] ; then
  echo
  echo "[openss debug]: ossdriver argument #0 = $0"
  echo "[openss debug]: ossdriver argument #1 = $1"
  echo "[openss debug]: ossdriver argument #2 = $2"
  echo "[openss debug]: ossdriver argument #3 = $3"
  echo
fi

# strip off any paths and get the script name.
calling_script_name=$0
experiment_name=${calling_script_name##*/}
# strip oss from expeiment name to get collector name
collector=${experiment_name:3}

real_name=`basename "$0"`
if [[ -z "$1" || $show_help == 1 ]] ; then
   echo ""
   echo "Usage: $real_name \"executable\" [extra_args]"
   echo "Usage: $real_name help or --help"
   echo ""
   echo "Where \"executable\" is defined as the command that you normally"
   echo "use to execute your program but placed in quotes"
   echo "Example: $real_name \"mpirun -N 16 -n 256 ./smg2000 -n 50 50 50\" [extra_args]"
   echo "The optional \"extra_args\" are defined as follows:"
   echo ""

   if [[ "$experiment_name" != "ossio" && "$experiment_name" != "ossiot"  && 
         "$experiment_name" != "ossmpi" && "$experiment_name" != "ossmpit" && 
         "$experiment_name" != "ossmpip" && "$experiment_name" != "ossmem" && 
         "$experiment_name" != "osspthreads" && "$experiment_name" != "ossiop" && 
         "$experiment_name" != "ossomptp" && 
         "$experiment_name" != "ossmpiotf" && "$experiment_name" != "osscuda" ]]; then
     echo "high        - Increase the default sampling rate or threshold "
     echo "              value to increase the number of samples taken."
     echo "low         - Decrease the default sampling rate or threshold "
     echo "              value to decrease the number of samples taken."
     echo "default     - Use the default sampling rate or threshold value. "
     echo "              This will override any environment variable settings."
   fi

   if [[ "$experiment_name" == "osspcsamp" || "$experiment_name" == "ossusertime" ]]; then
     echo "sampling rate - Use this sampling rate instead of the default or any environment"
     echo "                variable settings."
     echo "                Example: 80 for a sampling rate of 80 samples per second."

   elif [[ "$experiment_name" == "osshwc" || "$experiment_name" == "osshwctime" ]]; then
     echo "papi_event  - Specify the papi event."
     echo "              Example: PAPI_FP_OPS for Floating point operations."
     echo "              Or PAPI_L1_DCM for Level 1 data cache misses."
     echo "threshold   - Use this threshold value for the specified papi_event "
     echo "              instead of the default or any environment variable settings."
     whichpapi_avail=`which papi_avail`
     real_papivail_name=`basename "$whichpapi_avail"`
     if test -f $whichpapi_avail
      then
	echo ""
        echo "To view available hardware counter events for running with a threashold"
        echo "run the following command on the host where your application will run:"
	echo ""
        echo "$real_papivail_name | grep \"Yes   No\""
	echo ""
        echo "For clusters typically you want to use the events on the compute nodes:"
	echo "mpirun -np 1 $real_papivail_name | grep \"Yes   No\""
	echo ""
	echo "The $experiment_name experiment can also use papi native events."
	echo "See the manpage for papi_native_avail."
     fi

   elif [ "$experiment_name" == "osshwcsamp" ]; then
     echo "papi_event(s) - Specify a papi event or up to six (6) events depending on"
     echo "                number of physical counters available on your platform. If an"
     echo "                event is derived from multiple events then the total event"
     echo "                count is reduced by the number of events needed to derive the event."
     echo "                Example: PAPI_FP_OPS,PAPI_L1_DCM for Floating point operations"
     echo "                and Level 1 data cache misses."
     echo "sampling rate - Use this sampling rate instead of the default or any environment"
     echo "                variable settings."
     echo "                Example: 80 for a sampling rate of 80 samples per second."
     whichpapi_avail=`which papi_avail`
     real_papivail_name=`basename "$whichpapi_avail"`
     if test -f $whichpapi_avail
      then
	echo ""
        echo "To view available hardware counter events for running with a threshold"
        echo "run the following command on the host where your application will run:"
	echo ""
        echo "$real_papivail_name | grep \"Yes\""
	echo ""
        echo "For clusters typically you want to use the events on the compute nodes:"
	echo "mpirun -np 1 $real_papivail_name | grep \"Yes\""
	echo ""
	echo "The osshwcsamp experiment can also use papi native events."
	echo "See the manpage for papi_native_avail."
        echo "The papi_event_chooser command can assist in selecting events that can be counted"
        echo "together in a set. See the manpage for papi_event_chooser."
     fi

   elif [[ "$experiment_name" == "ossio" || "$experiment_name" == "ossiot" || "$experiment_name" == "ossiop" ]]; then
     echo "I/O functions to trace - Specify the list of I/O functions to be traced"
     echo "                         when running the io,iop, or iot experiments."
     echo "Example: read,write,dup"

   elif [[ "$experiment_name" == "ossmpi" || "$experiment_name" == "ossmpit" || "$experiment_name" == "ossmpiotf" || "$experiment_name" == "ossmpip" ]]; then
     echo "MPI functions to trace - Specify the list of MPI functions to be traced"
     echo "                         when running the mpi, mpit or mpiotf experiments."
     echo "Example: MPI_Send,MPI_Isend,MPI_Finalize"

   elif [[ "$experiment_name" == "ossmem" ]]; then
     echo "Memory functions to trace - Specify the list of memory functions to be traced"
     echo "                            when running the mem experiment."
     echo "Example: malloc,free"

   elif [[ "$experiment_name" == "osspthreads" ]]; then
     echo "Pthreads functions to trace - Specify the list of pthreads functions to be traced"
     echo "                              when running the mem experiment."
     echo "Example: pthread_create"

   elif [ "$experiment_name" == "osscuda" ]; then
     echo "The following arguments control the peroidic sampling of both CPU and GPU"
     echo "hardware performance counters performed by the $collector collector:"
     echo ""
     echo "         \"all\" - Periodically sample all instructions."
     echo "    \"branches\" - Periodically sample branch instructions."
     echo "     \"integer\" - Periodically sample integer instructions."
     echo "      \"single\" - Periodically sample single-precision float instructions."
     echo "      \"double\" - Periodically sample double-precision float instructions."
     echo "      \"memory\" - Periodically sample load/store instructions."
     echo ""
     echo "         \"low\" - Periodically sample the requested instructions every 100 ms."
     echo "     \"default\" - Periodically sample the requested instruutions every 10 ms."
     echo "        \"high\" - Periodically sample the requested instructions every 1 ms."
     echo ""
     echo "In addition, a custom sampling configuarion can be specified by setting"
     echo "the OPENSS_CUDA_CONFIG environment variable to a comma-delimited list of"
     echo "parameters. The allowed parameters are:"
     echo ""
     echo "     interval=<n>    The periodic sampling interval (nS)."
     echo "    <event>[@<n>]    The PAPI or CUPTI event/metric and, optionally, a overflow"
     echo "                     threshold for event-based PC sampling (CPU only). E.g. use"
     echo "                     \"PAPI_TOT_CYC\" to peroidically sample CPU total cycles or"
     echo "                     \"PAPI_TOT_CYC@1000000\" to sample the PC every 1,000,000"
     echo "                     CPU total cycles."
     echo ""
     echo "Run \"papi_avail\", \"papi_native_avail\", and/or \"cupti_avail\" to discover the"
     echo "available hardware counter events available for a specific platform. Trace"
     echo "data is collected for all kernel executions and data transfers regardless of"
     echo "whether any hardware counter sampling has been configured."
   fi
   echo ""
   exit
fi

# For collectors there are only a handful of option combinations that need to
# be verified based on the experiment type.
#
# The sampling collecors pcsamp and usertime allow one option: rate.
#
# The hwcsamp sampling collector allows two options: rate and or event where
# event is a coma separated list or singular event.
#
# The threshold collectors hwc and hwctime allow two options: threshold and event.
#
# The trace collectors are io,iop,iot,mem,mpi,mpit,mpip,mpotf,pthreads and
# only support specifing a list of functions to trace. The list can be one or more
# functon names separated by a comma.
#
# The fpe collectors allows one option: event where event is a comma separated
# list or singular event.
#
# The cuda and cudaio collectors allow specifying a configuration.
#
# The position parameters for an experiment will override any corresponding
# environment variables the user may have set for the experiment.
# ie. positional parameters take precedence.
#
# pcsamp	RATE
# hwcpcsamp	RATE EVENT|EVENTS
# hwc,hwctime   THRESHOLD EVENT
# trace         EVENT|EVENTS|EVENTCATAGORY
# fpe           EVENT
# cuda          CONFIG
#
# At this time, only hwc based experiments can expect more than 2 arguments
# specifying parameters to the collectors.  Therefore we only need to
# determine when there are two args, which one has only integers values
# that imply it is a rate or threshold. For hwc,hwctime:
# eg.
# osshwc 1000000 PAPI_TOT_INS
# vs   
# osshwc PAPI_TOT_INS 1000000
#
# For hwcsamp:
# osshwcsamp 10 PAPI_TOT_INS,PAPI_FP_OPS
# vs   
# osshwc PAPI_TOT_INS,PAPI_FP_OPS 10
#

#set -x


is_tracing_experiment=false
is_sampling_experiment=false
is_hwc_experiment=false
is_cuda_experiment=false

case $collector in
    io*|mpi*|mem|fpe|pthreads) is_tracing_experiment=true;;
    hwc*) is_hwc_experiment=true;;
    cuda*) is_cuda_experiment=true;;
    *) is_sampling_experiment=true;;
esac

# test two experiment parameters else one else everthing defaults
# to collector default or environment variables. If arg 2 or 3
# are specified the values will override environement variables.
has_string=false
has_num=false
if [ ! -z "$3" ] ; then
  case $2 in
    "high") high_flag=true;;
    "low") low_flag=true;;
    "default") use_default_flag=true ; string_value=$2;;
    ''|*[!0-9]*) string_value=$2 ; has_string=true ;;
    *) rate_threshold_value=$2 ; has_num=true;;
  esac
  case $3 in
    "high") high_flag=true;;
    "low") low_flag=true;;
    "default") use_default_flag=true ; string_value=$2;;
    ''|*[!0-9]*) string_value=$3 ; has_string=true;;
    *) rate_threshold_value=$3 ; has_num=true;;
  esac
elif [ ! -z "$2" ] ; then
  case $2 in
    "high") high_flag=true;;
    "low") low_flag=true;;
    "default") use_default_flag=true ; string_value=$2;;
    ''|*[!0-9]*) string_value=$2 ; has_string=true;;
    *) rate_threshold_value=$2 ; has_num=true;;
  esac
fi

#
# FIXME:  There are native events that can be passed and do not contain
# the PAPI_ string.  How are these handled???
# The positional dependency here is ambigous?
# ie. event list can preceed or follow threshold?
# a better test is to determine when there are only numbers in the
# expression being tested and assume that is the threhsold.
# this has implications later when trying to make sense of the
# rate_threshold_value case in the hwc* collector sections.
#
# given the variablity of potential native event names there is no
# simple test to verify the string argument is in fact a valid event
# name. So at this time the hwc collectors make no use of has_papi.
has_papi=false
if [ has_string ] ; then
  if [ is_hwc_experiment ] ; then
      match=`expr match "$string_value" 'PAPI_'`
      if [ $match != 0 ] ; then
	has_papi=true
      fi
  fi
fi

################################################################################
# Run Open|SpeedShop
################################################################################


if [ $debug_flag == 1 ] ; then
  echo "[openss debug]: experiment_name=$experiment_name"
  echo "[openss debug]: high_flag=$high_flag"
  echo "[openss debug]: low_flag=$low_flag"
  echo "[openss debug]: use_default_flag=$use_default_flag"
  echo "[openss debug]: string_value=$string_value"
  echo "[openss debug]: instrumentor=$instrumentor"
fi



# ------------------------------------------------------------------------------------
# -- PCSAMP EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------

case "$experiment_name" in
  osspcsamp)

  # always set the default
  rate=$rate_threshold_value
  default_rate=$pcsamp_default_rate
  if [ "$rate" == "0" ] ; then
      if [ ! -z "$OPENSS_PCSAMP_RATE" ] ; then
          rate=$OPENSS_PCSAMP_RATE
      elif [ ! -z "$CBTF_PCSAMP_RATE" ] ; then
          rate=$CBTF_PCSAMP_RATE
      else
          rate=$default_rate
      fi
  fi
  # the precedent is that when low, high, or default is specified to the driver
  # we will always override the environment variabe for rate.
  if [ $low_flag == true ] ; then
     let rate=10
     if [ -z "$OPENSS_PCSAMP_RATE" ] ; then
       echo "[openss]: $collector experiment using sampling rate: \"$rate\" because the \"low\" parameter is specified."
     elif [ ! -z "$OPENSS_PCSAMP_RATE" ] ; then
       echo "[openss]: $collector experiment OPENSS_PCSAMP_RATE ignored because the \"low\" parameter is specified."
     elif [ ! -z "$CBTF_PCSAMP_RATE" ] ; then
       echo "[openss]: $collector experiment CBTF_PCSAMP_RATE ignored because the \"low\" parameter is specified."
     fi
  elif [ $high_flag == true ] ; then
     let rate=200
     if [ -z "$OPENSS_PCSAMP_RATE" ] ; then
       echo "[openss]: $collector experiment using sampling rate: \"$rate\" because the \"high\" parameter is specified."
     elif [ ! -z "$OPENSS_PCSAMP_RATE" ] ; then
       echo "[openss]: $collector experiment OPENSS_PCSAMP_RATE ignored because the \"high\" parameter is specified."
     elif [ ! -z "$CBTF_PCSAMP_RATE" ] ; then
       echo "[openss]: $collector experiment CBTF_PCSAMP_RATE ignored because the \"high\" parameter is specified."
     fi

  elif [ $use_default_flag == true ] ; then
     if [ -z "$OPENSS_PCSAMP_RATE" ] ; then
       echo "[openss]: $collector experiment using sampling rate: \"$rate\" because the \"default\" parameter is specified."
     else
       if [ $default_rate != $OPENSS_PCSAMP_RATE ] ; then
         echo "[openss]: $collector experiment OPENSS_PCSAMP_RATE ignored because the \"default\" parameter is specified."
       elif [ $default_rate != $CBTF_PCSAMP_RATE ] ; then
         echo "[openss]: $collector experiment CBTF_PCSAMP_RATE ignored because the \"default\" parameter is specified."
       fi
     fi
  else
     if [ ! -z "$OPENSS_PCSAMP_RATE" ] ; then
       echo "[openss]: $collector experiment environment variable detected OPENSS_PCSAMP_RATE=$OPENSS_PCSAMP_RATE."
     fi
  fi 

  # no need to set anything for the defaults.
  if [ "$rate" == "$default_rate" ] ; then
	echo "[openss]: $collector experiment using the default sampling rate: \"$default_rate\"."
  else
	echo "[openss]: $collector experiment user specified sampling rate is $rate"
	if [ "$instrumentor" == "cbtf" ] ; then
	    export CBTF_PCSAMP_RATE=$rate
	else
	    export OPENSS_PCSAMP_RATE=$rate
	fi
  fi

  # default to offline unless --cbtf was used on commandline.
  if [ $force_cbtf_flag == false ] ; then
    cbtf_offline_opt="--offline"
    setup_offline
  fi
  ;;

# ------------------------------------------------------------------------------------
# -- USERTIME EXPERIMENT SPECIFIC CODE -----------------------------------------------
# ------------------------------------------------------------------------------------

  ossusertime)

  rate=$rate_threshold_value
  default_rate=$usertime_default_rate
  if [ "$rate" == "0" ] ; then
      if [ ! -z "$OPENSS_USERTIME_ATE" ] ; then
          rate=$OPENSS_USERTIME_RATE
      elif [ ! -z "$CBTF_USERTIME_RATE" ] ; then
          rate=$CBTF_USERTIME_RATE
      else
          rate=$default_rate
      fi
  fi

  if [ $low_flag == true ] ; then
     let rate=10
     if [ -z "$OPENSS_USERTIME_RATE" ] ; then
       echo "[openss]: $collector experiment using sampling rate: \"$rate\" because the \"low\" parameter is specified."
     else
       echo "[openss]: $collector experiment OPENSS_USERTIME_RATE ignored because the \"low\" parameter is specified."
     fi
  elif [ $high_flag == true ] ; then
     let rate=200
     if [ -z "$OPENSS_USERTIME_RATE" ] ; then
       echo "[openss]: $collector experiment using sampling rate: \"$rate\" because the \"high\" parameter is specified."
     else
       echo "[openss]: $collector experiment OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE ignored because the \"high\" parameter is specified."
     fi
  elif [ $use_default_flag == true ] ; then
     if [ -z "$OPENSS_USERTIME_RATE" ] ; then
       echo "[openss]: $collector experiment using sampling rate: \"$rate\" because the \"default\" parameter is specified."
     else
       if [ $default_rate != $OPENSS_USERTIME_RATE ] ; then
         echo "[openss]: $collector experiment OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE ignored because the \"default\" parameter is specified."
       fi
     fi

  else
     if [ ! -z "$OPENSS_USERTIME_RATE" ] ; then
       echo "[openss]: $collector experiment environment variable detected OPENSS_USERTIME_RATE=$OPENSS_USERTIME_RATE"
     fi
  fi 

  # no need to set anything for the defaults.
  if [ "$rate" == "$default_rate" ] ; then
	echo "[openss]: $collector experiment using the default sampling rate: \"$default_rate\"."
  else
	echo "[openss]: $collector experiment user specified sampling rate is $rate"
	if [ "$instrumentor" == "cbtf" ] ; then
	    export CBTF_USERTIME_RATE=$rate
	else
	    export OPENSS_USERTIME_RATE=$rate
	fi
  fi

  # default to offline unless --cbtf was used on commandline.
  if [ $force_cbtf_flag == false ] ; then
    cbtf_offline_opt="--offline"
    setup_offline
  fi
  ;;

# ------------------------------------------------------------------------------------
# -- HWC EXPERIMENT SPECIFIC CODE ----------------------------------------------------
# ------------------------------------------------------------------------------------

  osshwc)

  # check for user specified threshold.  set default otherwise.
  # In reality, the threshold default is computed on the node where
  # the exeriment is run. So for the default cases we should
  # NOT use the hwc_default_threshold defined in this script.
  threshold=$rate_threshold_value
  threshold=$rate_threshold_value
  if [ $threshold == 0 ] ; then
     threshold=$hwctime_default_threshold
  fi

  # set rate according to special flags or existing env var.
  export_threshold=false
  if [ "$low_flag" == true ] ; then
     threshold=1000000
     export_threshold=true
  elif [ "$high_flag" == true ] ; then
     threshold=2000000000
     export_threshold=true
  elif [ "$use_default_flag" == true ] ; then
     threshold=$hwctime_default_threshold
     export_threshold=true
  elif [ $threshold != 0 ] ; then
     export_threshold=true
  elif [ ! -z "$OPENSS_HWC_THRESHOLD" ] ; then
     threshold=$OPENSS_HWC_THRESHOLD
     export_threshold=true
  fi 

  # echo rate choices to user.
  if [ ! -z "$OPENSS_HWC_THRESHOLD" ]; then
      if [ "$low_flag" == true ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWC_THRESHOLD because the \"low\" parameter is specified."
      elif [ "$high_flag" == true ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWC_THRESHOLD because the \"high\" parameter is specified."
      elif [ "$use_default_flag" == true ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWC_THRESHOLD because the \"default\" parameter is specified."
      elif [ "$threshold" != "$hwc_default_threshold" ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWC_THRESHOLD because the \"threshold\" parameter is specified."
      fi
  else
      if [ "$low_flag" == true ] ; then
	echo "[openss]: $collector using low threshold: $threshold."
      elif [ "$high_flag" == true ] ; then
	echo "[openss]: $collector using high threshold: $threshold."
      elif [ "$use_default_flag" == true ] || [ $export_threshold == false ]; then
	echo "[openss]: $collector using default collector computed default."
      elif [ $export_threshold == true ] ; then
	echo "[openss]: $collector using user specified threshold: $threshold."
      fi
  fi

  # echo event choices to user.
  export_event=false
  if [ ! -z "$OPENSS_HWC_EVENT" ] && [ "$string_value" != "" ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWC_EVENT because the \"event\" parameter is specified."
        echo "[openss]: $collector using user specified papi event: \"$string_value\"."
	export_event=true
  elif [ ! -z "$OPENSS_HWC_EVENT" ] && [ "$string_value" == "" ] ; then
        echo "[openss]: $collector using OPENSS_HWC_EVENT papi event: \"$OPENSS_HWC_EVENT\"."
	export_event=true
  elif [ ! -z "$OPENSS_HWC_EVENT" ] && [ "$use_default_flag" == true ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWC_EVENT because the \"default\" parameter is specified."
        echo "[openss]: $collector using default papi event: \"$hwc_default_event\"."
  elif [ "$string_value" != "" ] && [ "$string_value" != "default" ] ; then
        echo "[openss]: $collector using user specified papi event: \"$string_value\""
	export_event=true
  else
        echo "[openss]: $collector using default papi event: \"$hwc_default_event\"."
  fi

  # exports passed on to collector runtimes.
  if [ $export_threshold == true ] ; then
     if [ "$instrumentor" == "cbtf" ] ; then
       export CBTF_HWC_THRESHOLD=$threshold
     else
       export OPENSS_HWC_THRESHOLD=$threshold
     fi
  fi

  if [ $export_event == true ] ; then 
     if [ "$instrumentor" == "cbtf" ] ; then
       export CBTF_HWC_EVENT=$string_value
     else
       export OPENSS_HWC_EVENT=$string_value
     fi
  fi

  ;;

# ------------------------------------------------------------------------------------
# -- HWCSAMP EXPERIMENT SPECIFIC CODE ------------------------------------------------
# ------------------------------------------------------------------------------------

  osshwcsamp)

  # check for user specified rate.  set default otherwise.
  rate=$rate_threshold_value
  if [ "$rate" == "0" ] ; then
      rate=$hwcsamp_default_rate
  fi

  # set rate according to special flags or existing env var.
  if [ "$low_flag" == true ] ; then
     rate=10
  elif [ "$high_flag" == true ] ; then
     rate=200
  elif [ "$use_default_flag" == true ] ; then
     rate=$hwcsamp_default_rate
  elif [ ! -z "$OPENSS_HWCSAMP_RATE" ] ; then
     rate=$OPENSS_HWCSAMP_RATE
  fi 

  # echo rate choices to user.
  export_rate=false
  if [ ! -z "$OPENSS_HWCSAMP_RATE" ]; then
      if [ "$low_flag" == true ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWCSAMP_RATE because the \"low\" parameter is specified."
	export_rate=true
      elif [ "$high_flag" == true ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWCSAMP_RATE because the \"high\" parameter is specified."
	export_rate=true
      elif [ "$use_default_flag" == true ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWCSAMP_RATE because the \"default\" parameter is specified."
	export_rate=true
      elif [ "$rate" != "$hwcsamp_default_rate" ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWCSAMP_RATE because the \"rate\" parameter is specified."
      fi
  else
      if [ "$low_flag" == true ] ; then
	echo "[openss]: $collector using low sampling rate: \"$rate\"."
	export_rate=true
      elif [ "$high_flag" == true ] ; then
	echo "[openss]: $collector using high sampling rate: \"$rate\"."
	export_rate=true
      elif [ "$use_default_flag" == true ] || [ "$rate" == "$hwcsamp_default_rate" ]; then
	echo "[openss]: $collector using default sampling rate: \"$rate\"."
      elif [ "$rate" != "$hwcsamp_default_rate" ] ; then
	echo "[openss]: $collector using user specified sampling rate: \"$rate\"."
	export_rate=true
      fi
  fi

  # echo event choices to user.
  export_events=false
  if [ ! -z "$OPENSS_HWCSAMP_EVENTS" ] && [ "$string_value" != "" ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWCSAMP_EVENTS because the \"events\" parameter is specified."
        echo "[openss]: $collector using user specified papi events: \"$string_value\"."
	export_events=true
  elif [ ! -z "$OPENSS_HWCSAMP_EVENTS" ] && [ "$use_default_flag" == true ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWCSAMP_EVENTS because the \"default\" parameter is specified."
        echo "[openss]: $collector using default papi events: \"$hwcsamp_default_events\"."
  elif [ "$string_value" != "" ] && [ "$string_value" != "default" ] ; then
        echo "[openss]: $collector using user specified papi events: \"$string_value\""
	export_events=true
  else
        echo "[openss]: $collector using default papi events: \"$hwcsamp_default_events\"."
  fi

  # exports passed on to collector runtimes.
  if [ $export_rate == true ] ; then
     if [ "$instrumentor" == "cbtf" ] ; then
       export CBTF_HWCSAMP_RATE=$rate
     else
       export OPENSS_HWCSAMP_RATE=$rate
     fi
  fi

  if [ $export_events == true ] ; then 
     if [ "$instrumentor" == "cbtf" ] ; then
       export CBTF_HWCSAMP_EVENTS=$string_value
     else
       export OPENSS_HWCSAMP_EVENTS=$string_value
     fi
  fi

  # default to offline unless --cbtf was used on commandline.
  if [ $force_cbtf_flag == false ] ; then
    cbtf_offline_opt="--offline"
    setup_offline
  fi
  ;;

# ------------------------------------------------------------------------------------
# -- HWCTIME EXPERIMENT SPECIFIC CODE ------------------------------------------------
# ------------------------------------------------------------------------------------

  osshwctime)

  # check for user specified threshold.  set default otherwise.
  # In reality, the threshold default is computed on the node where
  # the exeriment is run. So for the default cases we should
  # NOT use the hwc_default_threshold defined in this script.
  threshold=$rate_threshold_value
  if [ $threshold == 0 ] ; then
     threshold=$hwctime_default_threshold
  fi

  # set rate according to special flags or existing env var.
  export_threshold=false
  if [ "$low_flag" == true ] ; then
     threshold=1000000
     export_threshold=true
  elif [ "$high_flag" == true ] ; then
     threshold=2000000000
     export_threshold=true
  elif [ "$use_default_flag" == true ] ; then
     threshold=$hwctime_default_threshold
     export_threshold=true
  elif [ $threshold != 0 ] ; then
     export_threshold=true
  elif [ ! -z "$OPENSS_HWCTIME_THRESHOLD" ] ; then
     threshold=$OPENSS_HWCTIME_THRESHOLD
     export_threshold=true
  fi 

  # echo rate choices to user.
  if [ ! -z "$OPENSS_HWCTIME_THRESHOLD" ]; then
      if [ "$low_flag" == true ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWCTIME_THRESHOLD because the \"low\" parameter is specified."
      elif [ "$high_flag" == true ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWCTIME_THRESHOLD because the \"high\" parameter is specified."
      elif [ "$use_default_flag" == true ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWCTIME_THRESHOLD because the \"default\" parameter is specified."
      elif [ "$threshold" != "$hwc_default_threshold" ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWCTIME_THRESHOLD because the \"threshold\" parameter is specified."
      fi
  else
      if [ "$low_flag" == true ] ; then
	echo "[openss]: $collector using low threshold: $threshold."
      elif [ "$high_flag" == true ] ; then
	echo "[openss]: $collector using high threshold: $threshold."
      elif [ "$use_default_flag" == true ] || [ $export_threshold == true ]; then
	echo "[openss]: $collector using default threshold: $threshold."
      elif [ $export_threshold == true ] ; then
	echo "[openss]: $collector using user specified threshold: $threshold."
      fi
  fi

  # echo event choices to user.
  export_event=false
  if [ ! -z "$OPENSS_HWCTIME_EVENT" ] && [ "$string_value" != "" ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWCTIME_EVENT because the \"event\" parameter is specified."
        echo "[openss]: $collector using user specified papi event: \"$string_value\"."
	export_event=true
  elif [ ! -z "$OPENSS_HWCTIME_EVENT" ] && [ "$string_value" == "" ] ; then
        echo "[openss]: $collector using OPENSS_HWCTIME_EVENT papi event: \"$OPENSS_HWCTIME_EVENT\"."
	export_event=true
  elif [ ! -z "$OPENSS_HWCTIME_EVENT" ] && [ "$use_default_flag" == true ] ; then
        echo "[openss]: $collector ignoring OPENSS_HWCTIME_EVENT because the \"default\" parameter is specified."
        echo "[openss]: $collector using default papi event: \"$hwc_default_event\"."
  elif [ "$string_value" != "" ] && [ "$string_value" != "default" ] ; then
        echo "[openss]: $collector using user specified papi event: \"$string_value\""
	export_event=true
  else
        echo "[openss]: $collector using default papi event: \"$hwc_default_event\"."
  fi

  # exports passed on to collector runtimes.
  if [ $export_threshold == true ] ; then
     if [ "$instrumentor" == "cbtf" ] ; then
       export CBTF_HWCTIME_THRESHOLD=$threshold
     else
       export OPENSS_HWCTIME_THRESHOLD=$threshold
     fi
  fi

  if [ $export_event == true ] ; then 
     if [ "$instrumentor" == "cbtf" ] ; then
       export CBTF_HWCTIME_EVENT=$string_value
     else
       export OPENSS_HWCTIME_EVENT=$string_value
     fi
  fi

  ;;

# ------------------------------------------------------------------------------------
# -- FPE EXPERIMENT SPECIFIC CODE ----------------------------------------------------
# ------------------------------------------------------------------------------------

  ossfpe)

  default_event_list=$fpe_default_events
  env_events_set=false
  if [ ! -z "$OPENSS_FPE_EVENT" ] ; then
    env_events_set=true
  fi

  if [ "$string_value" != "" ] ; then
    if [ $env_events_set == true ] ; then
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\". Override environment variable OPENSS_FPE_EVENT"
    else
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\"."
    fi
    OPENSS_FPE_EVENT=$string_value
    env_events_set=true
  elif [ $use_default_flag == true ] ; then
    if [ $env_events_set == true ] ; then
      echo "[openss]: $collector using default experiment trace function list. Ignoring environment variable OPENSS_FPE_EVENT"
      env_events_set=false
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_events_set=false
    fi
  else
    if [ $env_events_set == true ] ; then
      echo "[openss]: $collector using experiment trace function list from OPENSS_FPE_EVENT."
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_events_set=false
    fi
  fi

  if [ "$env_events_set" == true ] ; then 
    if [ "$instrumentor" == "cbtf" ] ; then
      CBTF_FPE_EVENT=$OPENSS_FPE_EVENT
      export CBTF_FPE_EVENT
    else
      export OPENSS_FPE_EVENT
    fi
  fi

  ;;

# ------------------------------------------------------------------------------------
# -- IO EXPERIMENT SPECIFIC CODE -----------------------------------------------------
# ------------------------------------------------------------------------------------

  ossio)

  env_trace_events_set=false
  if [ ! -z "$OPENSS_IO_TRACED" ] ; then
    env_trace_events_set=true
  fi

  if [ "$string_value" != "" ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\". Override environment variable OPENSS_IO_TRACED."
    else
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\"."
    fi
    OPENSS_IO_TRACED=$string_value
    env_trace_events_set=true
  elif [ $use_default_flag == true ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using default experiment trace function list. Ignoring environment variable OPENSS_IO_TRACED."
      env_trace_events_set=false
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_trace_events_set=false
    fi
  else
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using experiment trace function list from OPENSS_IO_TRACED."
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_trace_events_set=false
    fi
  fi

  if [ "$env_trace_events_set" == true ] ; then 
    if [ "$instrumentor" == "cbtf" ] ; then
      # cbtf collectors use one name. CBTF_IO_TRACED.
      CBTF_IO_TRACED=$OPENSS_IO_TRACED
      export CBTF_IO_TRACED
    else
      export OPENSS_IO_TRACED
    fi
  fi

  ;;

# ------------------------------------------------------------------------------------
# -- IOT EXPERIMENT SPECIFIC CODE ----------------------------------------------------
# ------------------------------------------------------------------------------------

  ossiot)

  env_trace_events_set=false
  if [ ! -z "$OPENSS_IOT_TRACED" ] ; then
    env_trace_events_set=true
  fi

  if [ "$string_value" != "" ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\". Ignoring environment variable OPENSS_IOT_TRACED."
    else
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\"."
    fi
    OPENSS_IOT_TRACED=$string_value
    env_trace_events_set=true
  elif [ $use_default_flag == true ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using default experiment trace function list. Ignoring environment variable OPENSS_IOT_TRACED."
      env_trace_events_set=false
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_trace_events_set=false
    fi
  else
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using experiment trace function list from OPENSS_IOT_TRACED."
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_trace_events_set=false
    fi
  fi

  if [ "$env_trace_events_set" == true ] ; then 
    if [ "$instrumentor" == "cbtf" ] ; then
      # cbtf collectors use one name. CBTF_IO_TRACED.
      CBTF_IO_TRACED=$OPENSS_IOT_TRACED
      export CBTF_IO_TRACED
    else
      export OPENSS_IOT_TRACED
    fi
  fi

  ;;

# ------------------------------------------------------------------------------------
# -- IOP EXPERIMENT SPECIFIC CODE ----------------------------------------------------
# ------------------------------------------------------------------------------------

  ossiop)

  env_trace_events_set=false

  # In reality the iop experiment never advertised an OPENSS_ env var name.
  # for consitency we can allow it. But this collector depends on CBTF_IO_TRACED
  # for all flavours of IO experiments in cbtf-krell.
  if [ ! -z "$OPENSS_IOP_TRACED" ] ; then
    env_trace_events_set=true
  fi

  if [ "$string_value" != "" ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\". Ignoring environment variable OPENSS_IOP_TRACED."
    else
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\"."
    fi
    OPENSS_IOP_TRACED=$string_value
    env_trace_events_set=true
  elif [ $use_default_flag == true ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using default experiment trace function list. Ignoring environment variable OPENSS_IOP_TRACED."
      env_trace_events_set=false
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_trace_events_set=false
    fi
  else
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using experiment trace function list from OPENSS_IOP_TRACED."
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_trace_events_set=false
    fi
  fi

  if [ $env_trace_events_set == true ] ; then 
    if [ "$instrumentor" == "cbtf" ] ; then
      # cbtf collectors use one name. CBTF_IO_TRACED.
      CBTF_IO_TRACED=$OPENSS_IOP_TRACED
      export CBTF_IO_TRACED
    else
      export OPENSS_IOP_TRACED
    fi
  fi

  ;;

# ------------------------------------------------------------------------------------
# -- MEM EXPERIMENT SPECIFIC CODE ----------------------------------------------------
# ------------------------------------------------------------------------------------

  ossmem)

  env_trace_events_set=false

  # In reality the mem experiment never advertised an OPENSS_ env var name.
  # for consitency we can allow it. But this collector depends on CBTF_MEM_TRACED
  if [ ! -z "$OPENSS_MEM_TRACED" ] ; then
    env_trace_events_set=true
  fi

  if [ "$string_value" != "" ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\". Ignoring environment variable OPENSS_MEM_TRACED."
    else
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\"."
    fi
    OPENSS_MEM_TRACED=$string_value
    env_trace_events_set=true
  elif [ $use_default_flag == true ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using default experiment trace function list. Ignoring environment variable OPENSS_MEM_TRACED."
      env_trace_events_set=false
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_trace_events_set=false
    fi
  else
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using experiment trace function list from OPENSS_MEM_TRACED."
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_trace_events_set=false
    fi
  fi

  if [ $env_trace_events_set == true ] ; then 
    if [ "$instrumentor" == "cbtf" ] ; then
      CBTF_MEM_TRACED=$OPENSS_MEM_TRACED
      export CBTF_MEM_TRACED
    else
      export OPENSS_MEM_TRACED
    fi
  fi

  ;;

# ------------------------------------------------------------------------------------
# -- PTHREADS EXPERIMENT SPECIFIC CODE -----------------------------------------------
# ------------------------------------------------------------------------------------

  osspthreads)

  env_trace_events_set=false

  # In reality the mem experiment never advertised an OPENSS_ env var name.
  # for consitency we can allow it. But this collector depends on CBTF_PTHREADS_TRACED
  if [ ! -z "$OPENSS_PTHREADS_TRACED" ] ; then
    env_trace_events_set=true
  fi

  if [ "$string_value" != "" ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\". Ignoring environment variable OPENSS_PTHREADS_TRACED."
    else
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\"."
    fi
    OPENSS_PTHREADS_TRACED=$string_value
    env_trace_events_set=true
  elif [ $use_default_flag == true ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using default experiment trace function list. Ignoring environment variable OPENSS_PTHREADS_TRACED."
      env_trace_events_set=false
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_trace_events_set=false
    fi
  else
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using experiment trace function list from OPENSS_PTHREADS_TRACED."
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_trace_events_set=false
    fi
  fi

  if [  $env_trace_events_set == true ] ; then 
    if [ "$instrumentor" == "cbtf" ] ; then
      CBTF_PTHREADS_TRACED=$OPENSS_PTHREADS_TRACED
      export CBTF_PTHREADS_TRACED
    else
      export OPENSS_PTHREADS_TRACED
    fi
  fi

  ;;

# ------------------------------------------------------------------------------------
# -- MPI EXPERIMENT SPECIFIC CODE ----------------------------------------------------
# ------------------------------------------------------------------------------------

  ossmpi)

  env_trace_events_set=false
  if [ ! -z "$OPENSS_MPI_TRACED" ] ; then
    env_trace_events_set=true
  fi

  echo use_default_flag=$use_default_flag
  echo string_value=$string_value

  if [ "$string_value" != "" ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\". Ignoring environment variable OPENSS_MPI_TRACED."
    else
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\"."
    fi

    case $string_value in
      all|default)
	  # no need to set anything for default or all.
          env_trace_events_set=false
      ;;
      collective_com)
          OPENSS_MPI_TRACED=$mpi_collective_com_traceable_functions
          env_trace_events_set=true
      ;;
      async_nonblocking)
          OPENSS_MPI_TRACED=$mpi_async_nonblocking_traceable_functions
          env_trace_events_set=true
      ;;
      asynchronous_p2p)
          OPENSS_MPI_TRACED=$mpi_asynchronous_p2p_traceable_functions
          env_trace_events_set=true
      ;;
      datatypes)
          OPENSS_MPI_TRACED=$mpi_datatypes_traceable_functions
          env_trace_events_set=true
      ;;
      environment)
          OPENSS_MPI_TRACED=$mpi_environment_traceable_functions
          env_trace_events_set=true
      ;;
      graphs_contexts_comms)
          OPENSS_MPI_TRACED=$mpi_graphs_contexts_comms_traceable_functions
          env_trace_events_set=true
      ;;
      persistent_com)
          OPENSS_MPI_TRACED=$mpi_persistent_com_traceable_functions
          env_trace_events_set=true
      ;;
      process_topologies)
          OPENSS_MPI_TRACED=$mpi_process_topologies_traceable_functions
          env_trace_events_set=true
      ;;
      synchronous_p2p)
          OPENSS_MPI_TRACED=$mpi_synchronous_p2p_traceable_functions
          env_trace_events_set=true
      ;;
      file_io)
          OPENSS_MPI_TRACED=$mpi_file_io_traceable_functions
          env_trace_events_set=true
      ;;
      *)
	  # use list as specified by user
          OPENSS_MPI_TRACED=$string_value
          env_trace_events_set=true
      ;;
      
    esac

  elif [ $use_default_flag == true ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using default experiment trace function list. Ignoring environment variable OPENSS_MPI_TRACED."
      env_trace_events_set=false
    else
      echo "[openss]: DEFAULT FLAG $collector using default experiment trace function list."
      env_trace_events_set=false
    fi
  else
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: ENVVAR $collector using experiment trace function list from OPENSS_MPI_TRACED."
    else
      echo "[openss]: $collector using default experiment trace function list."
    fi
  fi

  if [ $env_trace_events_set == true ] ; then 
    if [ "$instrumentor" == "cbtf" ] ; then
      CBTF_MPI_TRACED=$OPENSS_MPI_TRACED
      export CBTF_MPI_TRACED
    else
      export OPENSS_MPI_TRACED
    fi
  fi

  ;;

# ------------------------------------------------------------------------------------
# -- MPIP EXPERIMENT SPECIFIC CODE ---------------------------------------------------
# ------------------------------------------------------------------------------------

  ossmpip)

  env_trace_events_set=false
  if [ ! -z "$OPENSS_MPIP_TRACED" ] ; then
    env_trace_events_set=true
  fi
  if [ ! -z "$CBTF_MPI_TRACED" ] ; then
    env_trace_events_set=true
  fi

  if [ "$string_value" != "" ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\". Ignoring environment variable OPENSS_MPIP_TRACED."
    else
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\"."
    fi

    case $string_value in
      all|default)
	  # no need to set anything for default or all.
          env_trace_events_set=false
      ;;
      collective_com)
          OPENSS_MPIP_TRACED=$mpi_collective_com_traceable_functions
          env_trace_events_set=true
      ;;
      async_nonblocking)
          OPENSS_MPIP_TRACED=$mpi_async_nonblocking_traceable_functions
          env_trace_events_set=true
      ;;
      asynchronous_p2p)
          OPENSS_MPIP_TRACED=$mpi_asynchronous_p2p_traceable_functions
          env_trace_events_set=true
      ;;
      datatypes)
          OPENSS_MPIP_TRACED=$mpi_datatypes_traceable_functions
          env_trace_events_set=true
      ;;
      environment)
          OPENSS_MPIP_TRACED=$mpi_environment_traceable_functions
          env_trace_events_set=true
      ;;
      graphs_contexts_comms)
          OPENSS_MPIP_TRACED=$mpi_graphs_contexts_comms_traceable_functions
          env_trace_events_set=true
      ;;
      persistent_com)
          OPENSS_MPIP_TRACED=$mpi_persistent_com_traceable_functions
          env_trace_events_set=true
      ;;
      process_topologies)
          OPENSS_MPIP_TRACED=$mpi_process_topologies_traceable_functions
          env_trace_events_set=true
      ;;
      synchronous_p2p)
          OPENSS_MPIP_TRACED=$mpi_synchronous_p2p_traceable_functions
          env_trace_events_set=true
      ;;
      file_io)
          OPENSS_MPIP_TRACED=$mpi_file_io_traceable_functions
          env_trace_events_set=true
      ;;
      *)
	  # use list as specified by user
          OPENSS_MPIP_TRACED=$string_value
          env_trace_events_set=true
      ;;
      
    esac

  elif [ $use_default_flag == true ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using default experiment trace function list. Ignoring environment variable OPENSS_MPIP_TRACED."
      env_trace_events_set=false
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_trace_events_set=false
    fi
  else
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using experiment trace function list from OPENSS_MPIP_TRACED."
    else
      echo "[openss]: $collector using default experiment trace function list."
    fi
  fi

  if [ $env_trace_events_set == true ] ; then 
    if [ "$instrumentor" == "cbtf" ] ; then
      # cbtf collectors use one name. CBTF_MPI_TRACED.
      CBTF_MPI_TRACED=$OPENSS_MPIP_TRACED
      export CBTF_MPI_TRACED
    else
      export OPENSS_MPIP_TRACED
    fi
  fi

  ;;

# ------------------------------------------------------------------------------------
# -- MPIT EXPERIMENT SPECIFIC CODE ---------------------------------------------------
# ------------------------------------------------------------------------------------

  ossmpit)

  env_trace_events_set=false
  if [ ! -z "$OPENSS_MPIT_TRACED" ] ; then
    env_trace_events_set=true
  fi

  if [ "$string_value" != "" ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\". Ignoring environment variable OPENSS_MPIT_TRACED."
    else
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\"."
    fi

    case $string_value in
      all|default)
	  # no need to set anything for default or all.
          env_trace_events_set=false
      ;;
      collective_com)
          OPENSS_MPIT_TRACED=$mpi_collective_com_traceable_functions
          env_trace_events_set=true
      ;;
      async_nonblocking)
          OPENSS_MPIT_TRACED=$mpi_async_nonblocking_traceable_functions
          env_trace_events_set=true
      ;;
      asynchronous_p2p)
          OPENSS_MPIT_TRACED=$mpi_asynchronous_p2p_traceable_functions
          env_trace_events_set=true
      ;;
      datatypes)
          OPENSS_MPIT_TRACED=$mpi_datatypes_traceable_functions
          env_trace_events_set=true
      ;;
      environment)
          OPENSS_MPIT_TRACED=$mpi_environment_traceable_functions
          env_trace_events_set=true
      ;;
      graphs_contexts_comms)
          OPENSS_MPIT_TRACED=$mpi_graphs_contexts_comms_traceable_functions
          env_trace_events_set=true
      ;;
      persistent_com)
          OPENSS_MPIT_TRACED=$mpi_persistent_com_traceable_functions
          env_trace_events_set=true
      ;;
      process_topologies)
          OPENSS_MPIT_TRACED=$mpi_process_topologies_traceable_functions
          env_trace_events_set=true
      ;;
      synchronous_p2p)
          OPENSS_MPIT_TRACED=$mpi_synchronous_p2p_traceable_functions
          env_trace_events_set=true
      ;;
      file_io)
          OPENSS_MPIT_TRACED=$mpi_file_io_traceable_functions
          env_trace_events_set=true
      ;;
      *)
	  # use list as specified by user
          OPENSS_MPIT_TRACED=$string_value
          env_trace_events_set=true
      ;;
      
    esac

  elif [ $use_default_flag == true ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using default experiment trace function list. Ignoring environment variable OPENSS_MPIT_TRACED."
      env_trace_events_set=false
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_trace_events_set=false
    fi
  else
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using experiment trace function list from OPENSS_MPIT_TRACED."
    else
      echo "[openss]: $collector using default experiment trace function list."
    fi
  fi

  if [ $env_trace_events_set == true ] ; then 
    if [ "$instrumentor" == "cbtf" ] ; then
      # cbtf collectors use one name. CBTF_MPI_TRACED.
      CBTF_MPI_TRACED=$OPENSS_MPIT_TRACED
      export CBTF_MPI_TRACED
    else
      export OPENSS_MPIT_TRACED
    fi
  fi

  ;;

# ------------------------------------------------------------------------------------
# -- MPIOTF EXPERIMENT SPECIFIC CODE -------------------------------------------------
# ------------------------------------------------------------------------------------

  ossmpiotf)

  env_trace_events_set=false
  if [ ! -z "$OPENSS_MPIOTF_TRACED" ] ; then
    env_trace_events_set=true
  fi

  if [ "$string_value" != "" ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\". Ignoring environment variable OPENSS_MPIOTF_TRACED"
    else
      echo "[openss]: $collector experiment using specified trace function list: \"$string_value\"."
    fi

    case $string_value in
      all|default)
	  # no need to set anything for default or all.
          env_trace_events_set=false
      ;;
      collective_com)
          OPENSS_MPIOTF_TRACED=$mpi_collective_com_traceable_functions
          env_trace_events_set=true
      ;;
      async_nonblocking)
          OPENSS_MPIOTF_TRACED=$mpi_async_nonblocking_traceable_functions
          env_trace_events_set=true
      ;;
      asynchronous_p2p)
          OPENSS_MPIOTF_TRACED=$mpi_asynchronous_p2p_traceable_functions
          env_trace_events_set=true
      ;;
      datatypes)
          OPENSS_MPIOTF_TRACED=$mpi_datatypes_traceable_functions
          env_trace_events_set=true
      ;;
      environment)
          OPENSS_MPIOTF_TRACED=$mpi_environment_traceable_functions
          env_trace_events_set=true
      ;;
      graphs_contexts_comms)
          OPENSS_MPIOTF_TRACED=$mpi_graphs_contexts_comms_traceable_functions
          env_trace_events_set=true
      ;;
      persistent_com)
          OPENSS_MPIOTF_TRACED=$mpi_persistent_com_traceable_functions
          env_trace_events_set=true
      ;;
      process_topologies)
          OPENSS_MPIOTF_TRACED=$mpi_process_topologies_traceable_functions
          env_trace_events_set=true
      ;;
      synchronous_p2p)
          OPENSS_MPIOTF_TRACED=$mpi_synchronous_p2p_traceable_functions
          env_trace_events_set=true
      ;;
      file_io)
          OPENSS_MPIOTF_TRACED=$mpi_file_io_traceable_functions
          env_trace_events_set=true
      ;;
      *)
	  # use list as specified by user
          OPENSS_MPIOTF_TRACED=$string_value
          env_trace_events_set=true
      ;;
      
    esac

  elif [ $use_default_flag == true ] ; then
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using default experiment trace function list. Ignoring environment variable OPENSS_MPIOTF_TRACED"
      env_trace_events_set=false
    else
      echo "[openss]: $collector using default experiment trace function list."
      env_trace_events_set=false
    fi
  else
    if [ $env_trace_events_set == true ] ; then
      echo "[openss]: $collector using experiment trace function list from OPENSS_MPIOTF_TRACED."
    else
      echo "[openss]: $collector using default experiment trace function list."
    fi
  fi

  if [ $env_trace_events_set == true ] ; then 
    if [ "$instrumentor" == "cbtf" ] ; then
      CBTF_MPIOTF_TRACED=$OPENSS_MPIOTF_TRACED
      export CBTF_MPIOTF_TRACED
    else
      export OPENSS_MPIOTF_TRACED
    fi
  fi

  ;;



# ------------------------------------------------------------------------------------
# -- CUDA EXPERIMENT SPECIFIC CODE ---------------------------------------------------
# ------------------------------------------------------------------------------------

  osscuda)

    if [ ! -z "$OPENSS_CUDA_CONFIG" ] ; then
      echo "[openss]: $collector using configuration from OPENSS_CUDA_CONFIG."
      cuda_config=$OPENSS_CUDA_CONFIG
    else

      case $string_value in

        branches)
	  echo "[openss]: $collector counting branch instructions for CPU and GPU."
	  cuda_counters="PAPI_BR_INS,inst_control"
	  ;;

        integer)
	  echo "[openss]: $collector counting integer instructions for CPU and GPU."
	  cuda_counters="PAPI_INT_INS,inst_integer"
	  ;;

        single)
	  echo "[openss]: $collector counting single-precision float instructions for CPU and GPU."
	  cuda_counters="PAPI_SP_OPS,flop_count_sp"
	  ;;

        double)
	  echo "[openss]: $collector counting double-precision float instructions for CPU and GPU."
	  cuda_counters="PAPI_DP_OPS,flop_count_dp"
	  ;;

        memory)
	  echo "[openss]: $collector counting load/store instructions for CPU and GPU."
	  cuda_counters="PAPI_LST_INS,ldst_executed"
	  ;;

        *)
	  echo "[openss]: $collector counting all instructions for CPU and GPU."
	  cuda_counters="PAPI_TOT_INS,inst_executed"
	  ;;

      esac

      if [ $low_flag == "true" ]; then
        echo "[openss]: $collector using \"low\" periodic sampling rate (100 ms)."
	cuda_interval=100000000
      elif [ $high_flag == "true" ]; then
        echo "[openss]: $collector using \"high\" periodic sampling rate (1 ms)."
	cuda_interval=1000000
      else
        echo "[openss]: $collector using default periodic sampling rate (10 ms)."
	cuda_interval=10000000
      fi

      OPENSS_CUDA_CONFIG="interval=$cuda_interval,$cuda_counters"
      export OPENSS_CUDA_CONFIG

    fi

    echo "[openss]: $collector configuration: \"$OPENSS_CUDA_CONFIG\""

    CBTF_CUDA_CONFIG=$OPENSS_CUDA_CONFIG
    export CBTF_CUDA_CONFIG

    ;;

esac

# ------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------
if [ $debug_flag ==  1 ] ; then
  if [ "$instrumentor" == "cbtf" ] ; then
    if [ "$targetos" == "cray" -o "$targetos" == "cray-xk" -o "$targetos" == "cray-xe" ] ; then
      echo "[openss debug]: executing osscollect $topology_opt $cbtf_offline_opt --arch cray --program \"$1\" --collector $collector"
    else
      echo "[openss debug]: executing osscollect $topology_opt $cbtf_offline_opt --program \"$1\" --collector $collector"
    fi
  else
    echo "openss -offline -f \"$1\" $collector"
  fi
fi

# exit here for testing purposes...

if [ $invalid_experiment ] ; then
    echo "[openss]: in valid experiment expression"
elif [ "$instrumentor" == "cbtf" ] ; then
    if [ "$targetos" == "cray" -o "$targetos" == "cray-xk" -o "$targetos" == "cray-xe" ] ; then
       osscollect $topology_opt $cbtf_offline_opt --arch cray --program "$1" --collector $collector
    else
       osscollect $topology_opt $cbtf_offline_opt --program "$1" --collector $collector
    fi
elif [ "$instrumentor" == "offline" ] ; then
    openss -offline -f "$1" $collector
else
    echo "[openss]: experiment calling nothing."
fi
