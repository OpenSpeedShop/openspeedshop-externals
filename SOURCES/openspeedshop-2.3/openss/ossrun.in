#! /bin/bash
# Some of this code is inspired by the libmonitor package (monitor-run).

# Debug flag
ossrun_debug=0
if [ -n "$OPENSS_DEBUG_STARTUP" ]
then
    ossrun_debug=$OPENSS_DEBUG_STARTUP
fi

# The machine dependent abi libdir name has been computed 
# so use the information from one central location. 
machlibdir=@machine_dependent_libdir@
alt_machlibdir=@alt_machine_dependent_libdir@

monitor_prefix=@libmonitordir@
monitor_exec_prefix="${monitor_prefix}"
libmonitor="@libmonitorlibdir@/libmonitor.so"

if [ $ossrun_debug == 1 ]; then
   echo "OSSRUN DEBUG: a - monitor_prefix: $monitor_prefix"
   echo "OSSRUN DEBUG: a - libmonitor: $libmonitor"
fi


oss_prefix=@ossinstalldir@
oss_libdir=@ossinstalldir@/@machine_dependent_libdir@
oss_bindir=@ossinstalldir@/bin
oss_plugins=@ossinstalldir@/@machine_dependent_libdir@/openspeedshop

# Set up the MPI installation and corresponding lib directory paths
lam_prefix=@lamdir@
lam_libprefix=@lamlibdir@
lampi_prefix=@lampidir@
lampi_libprefix=@lampilibdir@
mpich_prefix=@mpichdir@
mpich_libprefix=@mpichlibdir@
mpich2_prefix=@mpich2dir@
mpich2_libprefix=@mpich2libdir@
mvapich_prefix=@mvapichdir@
mvapich_libprefix=@mvapichlibdir@
mvapich2_prefix=@mvapich2dir@
mvapich2_libprefix=@mvapich2libdir@
mpt_prefix=@mptdir@
mpt_libprefix=@mptlibdir@
openmpi_prefix=@openmpidir@
openmpi_libprefix=@openmpilibdir@

#
# Some MPI implementations require an additional library to handle Fortran MPI applications
# Also, if we are running a Python script as the executable and there is a MPI driver invoking the script, 
# if that script invokes a MPI application we need to have the MPI libraries available to handle MPI_Init_thread, 
# etc..  Therefore we create the b for base b_<mpi type>_libs MPI library variable and load that library 
# when running # non-mpi (mpi, mpit, mpiotf) experiments.
#
if test -f ${mpich2_prefix}/${machlibdir}/libfmpich.so; then
  f_mpich2_libs="${mpich2_prefix}/${machlibdir}/libfmpich.so"
  b_mpich2_libs="${mpich2_prefix}/${machlibdir}/libmpich.so"
elif test -f ${mpich2_prefix}/${altmachlibdir}/libfmpich.so; then
  f_mpich2_libs="${mpich2_prefix}/${altmachlibdir}/libfmpich.so"
  b_mpich2_libs="${mpich2_prefix}/${altmachlibdir}/libmpich.so"
fi

if test -f ${mvapich2_prefix}/${machlibdir}/libfmpich.so; then
  f_mvapich2_libs="${mvapich2_prefix}/${machlibdir}/libfmpich.so"
  b_mvapich2_libs="${mvapich2_prefix}/${machlibdir}/libmpich.so"
elif test -f ${mvapich2_prefix}/${altmachlibdir}/libfmpich.so; then
  f_mvapich2_libs="${mvapich2_prefix}/${altmachlibdir}/libfmpich.so"
  b_mvapich2_libs="${mvapich2_prefix}/${altmachlibdir}/libmpich.so"
fi

if test -f ${mvapich_libprefix}/libpmpich.so; then
  f_mvapich_libs="${mvapich_libprefix}/libfmpich.so"
  b_mvapich_libs="${mvapich_libprefix}/libmpich.so"
elif test -f ${mvapich_libprefix}/libpmpich.so; then
  f_mvapich_libs="${mvapich_libprefix}/libfmpich.so"
  b_mvapich_libs="${mvapich_libprefix}/libmpich.so"
fi

if test -f ${openmpi_libprefix}/libmpi.so; then
  b_openmpi_libs="${openmpi_libprefix}/libmpi.so"
elif test -f ${openmpi_libprefix}/libpmpi.so; then
  b_openmpi_libs="${openmpi_libprefix}/libmpi.so"
fi
if test -f ${openmpi_libprefix}/libmpi_mpifh.so; then
  f_openmpi_libs="${openmpi_libprefix}/libmpi_mpifh.so"
elif test -f ${openmpi_libprefix}/libpmpi_mpifh.so; then
  f_openmpi_libs="${openmpi_libprefix}/libpmpi_mpifh.so"
fi

if test -f ${mpt_libprefix}/libmpi.so; then
  f_mpt_libs=""
  b_mpt_libs="${mpt_libprefix}/libmpi.so"
elif test -f ${mpt_libprefix}/libpmpi.so; then
  f_mpt_libs=""
  b_mpt_libs="${mpt_libprefix}/libmpi.so"
fi

mpi_plugin=
output_dir=

default_mpi_impl=@ossdefaultmpi@

if [ -n "$OPENSS_MPI_IMPLEMENTATION" ]
then
    mpitouse=$OPENSS_MPI_IMPLEMENTATION
    if [ $ossrun_debug == 1 ]; then
       echo "OSSRUN DEBUG: uing mpitouse from OPENSS_MPI_IMPLEMENTATION: $mpitouse"
    fi
else
    mpitouse=`echo ${default_mpi_impl} |tr '[A-Z]' '[a-z]'`
    export OPENSS_MPI_IMPLEMENTATION=$mpitouse
    if [ $ossrun_debug == 1 ]; then
       echo "OSSRUN DEBUG: uing mpitouse from default_mpi_impl: $mpitouse"
    fi
fi

isexecutable=
ismpi=

for i in $*
do
    # test if argument is a file
    if test -f "$i"
    then
	# test if the file is elf binary and has the symbol MPI_Init.
	# may not be portable!
	isexecutable=`file $i | grep ELF`
	if [ -n "$isexecutable" ]
	then
            if [ $ossrun_debug == 1 ]; then
               echo "OSSRUN DEBUG: IS EXECUTABLE: $isexecutable"
            fi
	    ismpi=`nm $i | grep -i MPI_Init`
	fi

	if [ -n "$ismpi" ]
	then
            if [ $ossrun_debug == 1 ]; then
               echo "OSSRUN DEBUG: IS MPI: $ismpi"
            fi
            mpi_plugin="${oss_plugins}/mpi-${mpitouse}-rt-offline.so"
	    break
	fi
        if [ $ossrun_debug == 1 ]; then
           echo "OSSRUN DEBUG: end of executable loop, IS EXECUTABLE: $isexecutable"
           echo "OSSRUN DEBUG: end of executable loop, IS MPI: $ismpi"
        fi
    fi 
done

die()
{
    echo "$0: error: $*" 1>&2
    exit 1
}

usage()
{
    cat <<EOF
Usage: $0 [options] command arg collector...

If command uses arguments then command and arg
must be quoted. example:
$0 "mpirun -np 2 foo" collector

   -h, --help

   -c, --collector  <collector name>
Where collector name is one of the OpenSpeedShop
collectors: pcsamp, usertime, hwc, hwctime, ...

   -o, --output  <directory>
Where directory is the location to write the
raw performance data files. The utility tool
${oss_bindir}/ossutil is then run with the
named directory as an argument to create a .openss
database that can be view with openss. On large
cluster systems this should be set to fast file
system capable of storing large datasets. 
NOTE: this option will override any setting for
the environment variable OPENSS_RAWDATA_DIR.

EOF
    exit 0
}

if [ $ossrun_debug == 1 ]; then
  echo "OSSRUN DEBUG: ABOVE LOOPING THROUGH ARGUMENTS: $1"
fi

while test "x$1" != x
do
    if [ $ossrun_debug == 1 ]; then
      echo "OSSRUN DEBUG: ARGUMENT 1: $1"
      echo "OSSRUN DEBUG: ARGUMENT 2: $2"
      echo "OSSRUN DEBUG: ARGUMENT 3: $3"
      echo "OSSRUN DEBUG: ARGUMENT 4: $4"
      echo "OSSRUN DEBUG: ARGUMENT 5: $5"
    fi
    case "$1" in

        -h | --help )
            usage
            ;;

	-c | --collector)
            if [ $ossrun_debug == 1 ]; then
              echo "OSSRUN DEBUG: -c, 1st COLLECTOR ARGUMENT: $1"
              echo "OSSRUN DEBUG: -c, 2nd COLLECTOR ARGUMENT: $2"
            fi
            test "x$2" != x || die "missing argument: $*"
	    collector=$2
            if [ $ossrun_debug == 1 ]; then
              echo "OSSRUN DEBUG: -c, set collector to 2nd COLLECTOR ARGUMENT: $2"
            fi
            shift ; shift
            ;;

	-o | --output)
            if [ $ossrun_debug == 1 ]; then
              echo "OSSRUN DEBUG: -o, 1st OUTPUT ARGUMENT: $1"
              echo "OSSRUN DEBUG: -o, 2nd OUTPUT ARGUMENT: $2"
            fi
            test "x$2" != x || die "missing argument: $*"
            case "$2" in
                /* )  dir="$2" ;;
		* )   dir="`pwd`/$2" ;;
            esac
	    test -d "$dir" || die "unable to find: $dir"
	    export OPENSS_RAWDATA_DIR="${dir}"
            shift ; shift
            ;;

        -- )
            if [ $ossrun_debug == 1 ]; then
              echo "OSSRUN DEBUG: --, 1st DASH DASH ARGUMENT: $1"
            fi
            shift
            break
            ;;

        -* )
            if [ $ossrun_debug == 1 ]; then
              echo "OSSRUN DEBUG: -*, 1st UNKNOWN ARGUMENT: $1"
            fi
            die "unknown option: $1"
            ;;

        * )
            if [ $ossrun_debug == 1 ]; then
              echo "OSSRUN DEBUG: *, DEFAULT - BREAK OUT OF WHILE, 1st DEFAULT ARGUMENT: $1"
            fi
            break
            ;;
    esac
done

if [ "x${OPENSS_RAWDATA_DIR}" == "x" ]
then
   test -d "/tmp/${USER}/offline-oss" || mkdir -p "/tmp/${USER}/offline-oss"
   export OPENSS_RAWDATA_DIR="/tmp/${USER}/offline-oss"
else
   test -d ${OPENSS_RAWDATA_DIR} || mkdir -p ${OPENSS_RAWDATA_DIR}
fi

extra_mpi_libs=""

if [ $ossrun_debug == 1 ]; then
  echo "OSSRUN DEBUG: mpitouse, mpitouse=: $mpitouse"
fi

case "$mpitouse" in
    mpich2)
      extra_mpi_libs=${f_mpich2_libs}
      base_mpi_libs=${b_mpich2_libs}
      if [ $ossrun_debug == 1 ]; then
        echo "OSSRUN DEBUG: mpich2, extra_mpi_libs=: $extra_mpi_libs"
        echo "OSSRUN DEBUG: mpich2, base_mpi_libs=: $base_mpi_libs"
      fi
    ;;

    mvapich)
      extra_mpi_libs=${f_mvapich_libs}
      base_mpi_libs=${b_mvapich_libs}
      if [ $ossrun_debug == 1 ]; then
        echo "OSSRUN DEBUG: mvapich, extra_mpi_libs=: $extra_mpi_libs"
        echo "OSSRUN DEBUG: mvapich, base_mpi_libs=: $base_mpi_libs"
      fi
    ;;

    mvapich2)
      extra_mpi_libs=${f_mvapich2_libs}
      base_mpi_libs=${b_mvapich2_libs}
      if [ $ossrun_debug == 1 ]; then
        echo "OSSRUN DEBUG: mvapich2, extra_mpi_libs=: $extra_mpi_libs"
        echo "OSSRUN DEBUG: mvapich2, base_mpi_libs=: $base_mpi_libs"
      fi
    ;;

    mpt)
      extra_mpi_libs=${f_mpt_libs}
      base_mpi_libs=${b_mpt_libs}
      if [ $ossrun_debug == 1 ]; then
        echo "OSSRUN DEBUG: mpt, extra_mpi_libs=: $extra_mpi_libs"
        echo "OSSRUN DEBUG: mpt, base_mpi_libs=: $base_mpi_libs"
      fi
    ;;

    openmpi)
      extra_mpi_libs=${f_openmpi_libs}
      base_mpi_libs=${b_openmpi_libs}
      if [ $ossrun_debug == 1 ]; then
        echo "OSSRUN DEBUG: openmpi, extra_mpi_libs=: $extra_mpi_libs"
        echo "OSSRUN DEBUG: openmpi, base_mpi_libs=: $base_mpi_libs"
      fi
    ;;

esac

if [ $ossrun_debug == 1 ]; then
   echo "OSSRUN DEBUG: before case COLLECTOR: $collector"
fi

case "$collector" in
    # The mpi tracing plugins already collect mpi rank information so
    # we do not add the preload_file...
    mpi|mpit|mpiotf )
    mpicollector=${collector}-${mpitouse}
    export LD_PRELOAD=${oss_plugins}/$mpicollector-rt-offline.so:${extra_mpi_libs}:${libmonitor}
    if [ $ossrun_debug == 1 ]; then
      echo "OSSRUN DEBUG: 1 - mpicollector: $collector"
      echo "OSSRUN DEBUG: 1 - LD_PRELOAD: $LD_PRELOAD"
      echo "OSSRUN DEBUG: 1 - libmonitor: ${libmonitor}"
      echo "OSSRUN DEBUG: 1 - oss_plugins: ${oss_plugins}"
    fi

    ;;

    mpi-*|mpit-*|mpiotf-*)
    mpicollector=${collector}
    export LD_PRELOAD=${oss_plugins}/$mpicollector-rt-offline.so:${extra_mpi_libs}:${libmonitor}
    if [ $ossrun_debug == 1 ]; then
      echo "OSSRUN DEBUG: 2 - mpicollector: $collector"
      echo "OSSRUN DEBUG: 2 - LD_PRELOAD: $LD_PRELOAD"
      echo "OSSRUN DEBUG: 2 - libmonitor: ${libmonitor}"
      echo "OSSRUN DEBUG: 2 - oss_plugins: ${oss_plugins}"
    fi
    ;;


    # The non mpi tracing experiments need to trace MPI_Init to
    # gather the mpi rank information needed for the mpi_rank field
    # in the THREADS table of the openss database.  If the specified executable is 
    # an elf based true executable then do not load the base mpi library, but if it
    # is not, then it could be a script or python file and we will have to resolve MPI_Init.
    # Therefore, for those cases, load the MPI base library to resolve MPI_Init, MPI_Init_thread,..

    * )
    if [ -n "$isexecutable" ]
    then
       export LD_PRELOAD=${oss_plugins}/$collector-rt-offline.so:${libmonitor}
    else
       export LD_PRELOAD=${oss_plugins}/$collector-rt-offline.so:${base_mpi_libs}:${libmonitor}
    fi
    if [ $ossrun_debug == 1 ]; then
      echo "OSSRUN DEBUG: non-tracing mpi - LD_PRELOAD: $LD_PRELOAD"
      echo "OSSRUN DEBUG: non-tracing mpi - libmonitor: ${libmonitor}"
      echo "OSSRUN DEBUG: non-tracing mpi - oss_plugins: ${oss_plugins}"
    fi
    ;;
esac

if [ $ossrun_debug == 1 ]; then
   echo "OSSRUN DEBUG: COLLECTOR: $collector"
   echo "OSSRUN DEBUG: ABOUT TO EXEC: $@"
fi

exec $@
